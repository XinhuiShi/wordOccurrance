package src;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Scanner;
import java.util.stream.Collectors;

/**
 * Constructor for Word_Occurrences
 * 
 * @author Xinhui Shi
 * @see Date: 10/22/2019
 * @see Program Name: Word_Occurrences
 * @see Purpose: Analyze a text file to find how many times each word appears
 * 
 * @version 3
 * 
 */
public class Word_Occurrences {

	

	/**
	 * Gets the top 20 word occurrence from a text file.
	 * 
	 * @param file Location of the text file.
	 * @return ArrayList<String> in String.format of " %s : %s" of top 20
	 */
	public ArrayList<String> wordOccur(String file) {

		/*
		 * Main program. Passthrough a file location of type ".txt" into the method.
		 * This will output the top 20 most occurred words along with how many times it
		 * appear in an ArrayList of type String.
		 */
		try {

			String fileLocation = file;
//scan the file
			Map<String, Integer> wordsM = new HashMap<>();
			ArrayList<String> organizedM = new ArrayList<>();

			File x = new File(fileLocation);
			Scanner sc = new Scanner(x);
			while (sc.hasNext()) {
				String oneWord = sc.next().toLowerCase();
				oneWord = oneWord.replaceAll("'rt", "");
				oneWord = oneWord.replaceAll("'er", "");
				oneWord = oneWord.replaceAll("'ll", "");
				oneWord = oneWord.replaceAll("'st", "");
				oneWord = oneWord.replaceAll("'n", "");
				oneWord = oneWord.replaceAll("'s", "");
				oneWord = oneWord.replaceAll("'d", "");
				oneWord = oneWord.replaceAll("'t", "");

				if (oneWord.contains("--")) {
					String[] arr = oneWord.split("--", 0);
					for (String w : arr) {
						if (wordsM.containsKey(w.toLowerCase())) {
							wordsM.replace(w.toLowerCase(), wordsM.get(w.toLowerCase()) + 1);
						} else {
							wordsM.put(w.toLowerCase(), 1);
						}
					}
				} else {
					oneWord = oneWord.replaceAll("[^a-zA-Z]", "");
					if (wordsM.containsKey(oneWord.toLowerCase())) {
						wordsM.replace(oneWord.toLowerCase(), wordsM.get(oneWord.toLowerCase()) + 1);
					} else {
						wordsM.put(oneWord.toLowerCase(), 1);
					}
				}

			}
			sc.close();
			wordsM.entrySet().stream().sorted(Map.Entry.comparingByValue(Collections.reverseOrder())).limit(20)
					.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -> e1,
							LinkedHashMap::new))
					.forEach((s, integer) -> organizedM.add((String.format("%s : %s", s, integer))));

			return organizedM;

		} catch (FileNotFoundException e) {
			System.out.println("The file does not exist");
		}
		return new ArrayList<>();

	}

}
